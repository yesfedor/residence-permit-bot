const TelegramBot = require('node-telegram-bot-api')
const { TELEGRAM_TOKEN } = require("./const")
const { exec } = require('child_process')

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true })

const allowUsersId = [
    448873904,
]

bot.on('message', async ({ from, text, chat }) => {
    const send = async (text) => {
        await bot.sendMessage(chat.id, text)
    }

    async function startAssert() {
        exec('npm run parser:start', async (error, stdout, stderr) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error.message)
                await send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @yesfedor –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.')
                return
            }
            if (stderr) {
                console.error('–û—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ:', stderr)
                await send('–û—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @yesfedor –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.')
                return
            }
            try {
                const indexOf = stdout.indexOf('{')
                const { successPath } = JSON.parse(stdout.slice(indexOf))
                const prettyText = `–ù–∞–π–¥–µ–Ω–æ ${ successPath.length } –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—É—Ç–µ–π:\n ${ successPath.join(' \n --- \n ') }`
                await send(prettyText)
            } catch (e) {
                await send('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @yesfedor –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.')
            }
        })
    }

    if (!allowUsersId.includes(from.id)) {
        await send(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @yesfedor, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist. –í–∞—à id: ${from.id}`)
        return
    }

    switch (text) {
        case '/start':
            await bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                parse_mode: "MarkdownV2",
                reply_markup: JSON.stringify({
                    keyboard: [
                        ['–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É üöÄüöÄüöÄ'],
                    ],
                    resize_keyboard: true,
                })
            })
            return
        case '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É üöÄüöÄüöÄ':
            await send('–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (5-10 –º–∏–Ω)')
            await startAssert()
            return
    }

    await send(`${text}`)
})
